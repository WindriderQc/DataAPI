<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Data Farming App"> <meta name="author" content="SpecialBlend Production">
    <title>SBQC Server Dashboard</title>
    <link rel="shortcut icon" href="/img/favicon.ico" type="image/x-icon">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/sbqc.css" />
   <!-- DataTables (used by dashboard.ejs)  needs jquery  -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.datatables.net/2.1.8/js/dataTables.js" type="text/javascript" charset="utf8" ></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/2.1.8/css/dataTables.dataTables.css">
    
    <script src="https://cdn.jsdelivr.net/npm/moment@latest/moment.min.js"></script>

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-chart-geo"></script>

    <%- include('partials/mainHead', { title: 'SBQC Server Dashboard' }) %>
</head>
<body class="bg-light">
<%- include('partials/nav') %>

<div class="main pt-5">

    <header class="container py-4">
        <h5><b><i class="fas fa-tachometer-alt"></i> My Dashboard</b></h5>
    </header>

    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div id="card-scroll-container">
                <div class="row">
                    <%
                    const dbColors = {
                        'SBQC': 'green',
                    'datas': 'indigo',
                    'default': 'grey'
                };
                const icons = {
                    'users': 'fa-users',
                    'userLogs': 'fa-eye',
                    'mews': 'fa-comment',
                    'devices': 'fa-share-alt',
                    'default': 'fa-database'
                };
                %>
                <% collectionInfo.forEach(info => { %>
                    <div class="col-12 mb-4">
                        <div class="card summary-card <%= dbColors[info.db] || dbColors['default'] %> text-white shadow-lg p-3" data-collection="<%= info.collection %>" style="cursor: pointer;">
                            <div class="d-flex justify-content-between align-items-center">
                                <div><i class="fa <%= icons[info.collection] || icons['default'] %> fa-2x"></i></div>
                                <div class="text-end">
                                    <h5 class="mb-0"><%- info.count %></h5>
                                    <small><%= info.collection.charAt(0).toUpperCase() + info.collection.slice(1) %></small>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h5 class="card-title">World <span id="worldMapTitle" class="text-primary fw-bold"></span></h5>
                    <canvas id="worldMap" width="800" height="600"></canvas>
                </div>
            </div>
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Feeds</h5>
                    <table class="table table-striped bg-white">
                        <tbody>
                            <tr>
                                <td><i class="fa fa-user text-primary fa-lg"></i></td>
                                <td>New record, over 90 views.</td>
                                <td><i>10 mins</i></td>
                            </tr>
                            <tr>
                                <td><i class="fa fa-bell text-danger fa-lg"></i></td>
                                <td>Database error.</td>
                                <td><i>15 mins</i></td>
                            </tr>
                            <tr>
                                <td><i class="fa fa-users text-warning fa-lg"></i></td>
                                <td>New record, over 40 users.</td>
                                <td><i>17 mins</i></td>
                            </tr>
                            <tr>
                                <td><i class="fa fa-comment text-danger fa-lg"></i></td>
                                <td>New comments.</td>
                                <td><i>25 mins</i></td>
                            </tr>
                            <tr>
                                <td><i class="fa fa-bookmark text-primary fa-lg"></i></td>
                                <td>Check transactions.</td>
                                <td><i>28 mins</i></td>
                            </tr>
                            <tr>
                                <td><i class="fa fa-laptop text-danger fa-lg"></i></td>
                                <td>CPU overload.</td>
                                <td><i>35 mins</i></td>
                            </tr>
                            <tr>
                                <td><i class="fa fa-share-alt text-success fa-lg"></i></td>
                                <td>New shares.</td>
                                <td><i>39 mins</i></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
    </div>
    <hr>
   
    <hr>

    <div class="container">
        <h5>TimeZone</h5>
        <div id="ip_id"></div>
        <br>
        <div>
            <label for="sourceSelect">Select Source:</label>
            <select id="sourceSelect">
                <% for (const collection in collectionInfo) { %>
                    <option value="<%= collection %>" <%= collection === 'userLogs' ? 'selected' : '' %>><%= collection.charAt(0).toUpperCase() + collection.slice(1) %> </option>
                <% } %>
            </select>
        </div>
        <div id="tableContainer">
            <hr />
            <h3>Server logs</h3>
            <table id="logsTable" class="display"> </table>
        </div>
        <div class='loading'>
            <img src='img/loading.gif' alt=''>
        </div>
    </div>


   

    <div class="row">

              

     </div>
    
   
        <div id="main-container" class="container">
                      <div id="pixel-canvas"></div>
        </div>
                      
        
                 
        <script>  
                 
                let lastUpdateTime = 0;
                let delay = 1000; // 1 second delay

                function setup() 
                {    
                    const canvas = createCanvas(800, 600);
                    canvas.parent('pixel-canvas');  
                  

                }
                function draw() 
                {
                   

                      if (millis() - lastUpdateTime > delay) {
                            // Code to be executed less frequently
                            squares();
                            lastUpdateTime = millis();
                        }
                    

                }
                  
                
                function squares() {
                     background(180);
                     
                        for (let y = 0; y < height; y=y+15) {
                                    for (let x = 0; x < width; x=x+10) {
                                            fill(random(255), random(255), random(255));       
                                                rect(x, y, 8, 8);      
                                        }
                        }
                    
                }
        </script>


    
  
<%- include('partials/footer') %>
</div>


<script>
    // Requires tools.js and chartjs-chart-geo libraries
let worldMap;

document.addEventListener('DOMContentLoaded', async function() {

    let selectedCollection = null;
    const summaryCards = document.querySelectorAll('.summary-card');

    summaryCards.forEach(card => {
        card.addEventListener('click', function() {
            // Remove 'selected' class from all cards
            summaryCards.forEach(c => c.classList.remove('selected'));

            // Add 'selected' class to the clicked card
            this.classList.add('selected');

            // Store the selected collection name
            selectedCollection = this.getAttribute('data-collection');

            // Update the world map title
            const worldMapTitle = document.getElementById('worldMapTitle');
            if (worldMapTitle) {
                worldMapTitle.innerText = `- ${selectedCollection.charAt(0).toUpperCase() + selectedCollection.slice(1)}`;
            }
        });
    });

    const sourceSelect = document.getElementById('sourceSelect');
      sourceSelect.addEventListener('change', function() {
        source = this.value;
        skip = 0; 
        listAllLogs(source); 
      });
    
    
    listAllLogs("userLogs");

    await getUserInfo()

    const scrollContainer = document.getElementById('card-scroll-container');
    let isDown = false;
    let startY;
    let scrollTop;

    if (scrollContainer) {
        scrollContainer.addEventListener('mousedown', (e) => {
            isDown = true;
            scrollContainer.classList.add('grabbing');
            startY = e.pageY - scrollContainer.offsetTop;
            scrollTop = scrollContainer.scrollTop;
        });

        scrollContainer.addEventListener('mouseleave', () => {
            isDown = false;
            scrollContainer.classList.remove('grabbing');
        });

        scrollContainer.addEventListener('mouseup', () => {
            isDown = false;
            scrollContainer.classList.remove('grabbing');
        });

        scrollContainer.addEventListener('mousemove', (e) => {
            if (!isDown) return;
            e.preventDefault();
            const y = e.pageY - scrollContainer.offsetTop;
            const walk = (y - startY) * 2; // The multiplier affects scroll speed
            scrollContainer.scrollTop = scrollTop - walk;
        });
    }

});


  
async function getUserInfo()
{
    const info = await Tools.ipLookUp()
    document.getElementById('ip_id').innerHTML =  "<pre>"+JSON.stringify(info.TimeZone,null, '\t') +"</pre>"
} 


function setWorlGraph(data) {
    
      // Mapping of incorrect country names to correct country names
      const countryNameCorrections = {
        "United States" : "United States of America",
        "Russia": "Russian Federation",
        "South Korea": "Korea, Republic of",
        // Add more mappings as needed
    };

    const countryCounts = data.reduce((acc, entry) => {
        // Check if CountryName is valid before processing
        if (entry.CountryName) {
            // Correct the country name if it exists in the mapping
            const correctedCountryName = countryNameCorrections[entry.CountryName] || entry.CountryName;
            acc[correctedCountryName] = (acc[correctedCountryName] || 0) + 1;
        }
        return acc;
    }, {});
    //console.log('worldMapData', countryCounts);

 


    // Fetch or define the geo data (e.g., world geoJSON) 
    fetch('https://unpkg.com/world-atlas/countries-50m.json')
        .then(response => response.json())
        .then(world => {
        
            const countries = ChartGeo.topojson.feature(world, world.objects.countries).features;
            //console.log('countries', countries);

            // Create a set of valid country names
            const validCountryNames = new Set(countries.map(country => country.properties.name));
            // Check for missing country names
            Object.keys(countryCounts).forEach(countryName => {
                
                if (!validCountryNames.has(countryName)) {
                        console.warn(`Country name not found in ChartGeo countries list: ${countryName}`);
                    }
            });

            // Prepare the dataset
            const chartData = {
                labels: countries.map(d => d.properties.name),
                datasets: [{
                    label: 'Countries',
                    data: countries.map(country => ({
                        feature: country,
                        value: countryCounts[country.properties.name] || 0
                    })),
                    outline: countries,
                    backgroundColor: (context) => {
                        const dataItem = context.dataset.data[context.index];
                        if (!dataItem || !dataItem.value) {
                            return 'rgba(200, 200, 200, 0.25)'; // Default grey for missing values
                        }
                    
                        const value = dataItem.value;
            
                        if (value < 40) return `rgba(0, 200, 100, ${(value * 5) / 200 + 0.15})`;
                        return `rgba(0, 100, 200, ${(value * 3) / 100 + 0.1})`;
                    },
                }]
            };
            const config = {
                type: 'choropleth',
                data: chartData,
                options: {
                    showOutline: false,
                    showGraticule: false,
                    scales: {
                        projection: {
                            axis: 'x',
                            projection: 'equalEarth',
                        },
                    },
                    onClick: (evt, elems) => {
                        console.log(elems.map((elem) => elem.element.feature.properties.name));
                    },
                    geo: {
                        colorScale: {
                            display: false,
                        }
                    }, 
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            };
            //worldMap = new Chart( document.getElementById('worldMap'), config);
            if (worldMap) {
                    worldMap.destroy();
                }
                worldMap = new Chart(document.getElementById('worldMap'), config);

        });       
}

const loadingElement = document.querySelector('.loading');
const logsElement = document.querySelector('.logs');


let skip = 0;
let sort = 'desc'; 
let loading = false;


function listAllLogs(source) {
  loading = true;
  loadingElement.style.display = '';
    const url = `api/v1/v2/logs?skip=${skip}&sort=${sort}&source=${source}`
  const options =  { method: 'GET',    mode: 'no-cors' }

  fetch(url, options)
    .then(response => response.json())
    .then(result => {

        if (!result.logs || result.logs.length === 0) {
                console.warn('No logs available to display.');
                loadingElement.style.display = 'none';
                return;
            }

        //console.log('result', result)
        setWorlGraph(result.logs)



        // Collect all unique keys from all log entries
        const allKeys = new Set();
        result.logs.forEach(log => {
            if (log && typeof log === 'object') { // Ensure log is an object
                Object.keys(log).forEach(key => allKeys.add(key));
            }
        });

        // Normalize the data: ensure all objects have all keys from allKeys
        const normalizedLogs = result.logs.map(log => {
            const normalizedLog = {};
            if (log && typeof log === 'object') { // Process only if log is an object
                allKeys.forEach(key => {
                    normalizedLog[key] = log.hasOwnProperty(key) ? log[key] : ""; // Use empty string for missing keys
                });
            } else { // If log is not an object (e.g. null, primitive), create an object with empty values for all keys
                allKeys.forEach(key => {
                    normalizedLog[key] = "";
                });
            }
            return normalizedLog;
        });

        const columns = Array.from(allKeys).map((key) => ({
            title: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize column names
            data: key,
            defaultContent: "", // Provide default content for missing keys (good for safety)
            render:
                (key === 'date' || key === 'created')
                    ? function (data, type, row) {
                          // data will be "" if originally missing due to normalization
                          if (data === null || data === undefined || data === "") {
                              return ""; 
                          }
                          const dateObj = new Date(data);
                          // Check if dateObj is valid
                          if (isNaN(dateObj.getTime())) {
                              return ""; // Was not a valid date string
                          }
                          return dateObj.toLocaleString(); // Format the date
                      }
                    : null,
        }));
   
        loadDataTable({ data: normalizedLogs,  columns }); // Use normalizedLogs
        
        loadingElement.style.display = 'none';
    })
    .catch(error => {
        console.error('Error fetching logs:', error);
        loadingElement.style.display = 'none';
    });
   
}

function loadDataTable(dataset) {
    console.log('dataset', dataset);

    // Clear the table and remove lingering DataTable instance
    const table = $('#logsTable');
    if ($.fn.DataTable.isDataTable(table)) {
        table.DataTable().clear().destroy(); // Fully destroy the instance
    }

    // Empty the table structure to remove old columns
    table.empty();

    // Reinitialize the DataTable with the new dataset and columns
    table.DataTable({
        data: dataset.data,
        columns: dataset.columns,
        destroy: true, // Ensure old table is destroyed (redundant here for safety)
        scrollX: true
    });
}


var mySidebar = document.getElementById("mySidebar");
var overlayBg = document.getElementById("myOverlay");
// Toggle and add overlay effect
function w3_open() {
  if (mySidebar.style.display === 'block') {
    mySidebar.style.display = 'none';
    overlayBg.style.display = "none";
  } else {
    mySidebar.style.display = 'block';
    overlayBg.style.display = "block";
  }
}
// Close the sidebar with the close button
function w3_close() {
    console.log('w3_close called');
  mySidebar.style.display = "none";
  overlayBg.style.display = "none";
}
</script>




</body>
</html>
